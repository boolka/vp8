'use strict';

const WORD_SIZE = 8;
const SEGMENT_SIZE = Math.pow(2, WORD_SIZE);

const REGS = {
	ACC: 0x00,
	GPR: 0x01,
	PSW: 0x02,
	CS: 0x03,
	DS: 0x04,
	IC: 0x05,
	CI: 0x06,
	IR: 0x07
};

const CMDS = {
	// do nothing
	NOP: 0x00,

	// math
	ADD: 0x01,
	SUB: 0x02,
	MUL: 0x03,
	DIV: 0x04,
	INC: 0x05,
	DEC: 0x06,

	// logical
	AND: 0x07,
	XOR: 0x08,
	OR: 0x09,
	INV: 0x0A,

	// copy
	MOV: 0x0B,
	SET: 0x0C,

	// transition
	JMP: 0x0D,
	JIF: 0x0E,

	// input/output
	IN: 0x0F,
	OUT: 0x10,
	INR: 0x11,
	OUTR: 0x12,

	ADDR: 0x13,
	SUBR: 0x14,
	MULR: 0x15,
	DIVR: 0x16,

	INCR: 0x17,
	DECR: 0x18
};

const CMDS_BY_TYPE = {
	DUMMY: [CMDS.NOP],
	IN_OUT: [CMDS.IN, CMDS.OUT, CMDS.INR, CMDS.OUTR],
	REGISTER_WA: [CMDS.INC, CMDS.DEC],
	REGISTER_WR: [CMDS.INCR, CMDS.DECR],
	REGISTER_CWA: [CMDS.ADD, CMDS.SUB, CMDS.MUL, CMDS.DIV, CMDS.AND, CMDS.XOR, CMDS.OR, CMDS.INV, CMDS.INC, CMDS.DEC, CMDS.SET],
	REGISTER_RWR: [CMDS.MOV],
	REGISTER_RWA: [CMDS.ADDR, CMDS.SUBR, CMDS.MULR, CMDS.DIVR],
	TRANSITION: [CMDS.JMP, CMDS.JIF]
};

const CMD_TYPES = {
	DUMMY: 0,
	IN_OUT: 1,
	REGISTER_WA: 2, // with accumulator
	REGISTER_WR: 3, // with register
	REGISTER_CWA: 4, // const with accumulator
	REGISTER_RWR: 5, // register with register
	REGISTER_RWA: 6, // register with accumulator
	TRANSITION: 7
};

const CMD_ARGS_COUNT = {
	'0': [CMD_TYPES.DUMMY, CMD_TYPES.REGISTER_WA],
	'1': [CMD_TYPES.REGISTER_CWA, CMD_TYPES.REGISTER_WR, CMD_TYPES.REGISTER_RWA, CMD_TYPES.TRANSITION, CMD_TYPES.IN_OUT],
	'2': [CMD_TYPES.REGISTER_RWR]
};

module.exports = {
	WORD_SIZE,
	SEGMENT_SIZE,
	REGS,
	CMDS,
	CMD_TYPES,
	CMDS_BY_TYPE,
	CMD_ARGS_COUNT
};
